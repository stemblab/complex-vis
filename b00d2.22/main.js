// Generated by CoffeeScript 1.4.0
(function() {
  var ComplexFunctionImage, Image, colorMap, complex, cube, identity, log10, plotFunction, square;

  plotFunction = function() {
    var canvasId, f, xMax;
    canvasId = "canvas";
    f = identity;
    xMax = 2;
    return new ComplexFunctionImage({
      canvasId: canvasId,
      f: f,
      xMax: xMax
    }, colorMap);
  };

  colorMap = {
    saturation: function(r) {
      return 1;
    },
    lightness: function(r) {
      return 0.5 * (1 - 1 / (1 + 25 * log10(2 * r + 1)));
    },
    opacity: function(r) {
      return 1 / (1 + 4 * log10(1 + 2 * r));
    }
  };

  complex = numeric.complex;

  log10 = function(x) {
    return Math.log(x) / Math.LN10;
  };

  identity = function(z) {
    return z;
  };

  square = function(z) {
    return z * z;
  };

  cube = function(z) {
    return z * z * z;
  };

  ComplexFunctionImage = (function() {

    function ComplexFunctionImage(spec, colorMap) {
      var _ref, _ref1, _ref2, _ref3;
      this.spec = spec;
      this.colorMap = colorMap;
      this.pixelsPerSquare = (_ref = this.spec.pixelsPerSquare) != null ? _ref : 2;
      this.image = new Image(this.spec.canvasId, this.pixelsPerSquare);
      this.pxMax = this.image.xMax();
      this.pyMax = this.image.yMax();
      this.f = this.spec.f;
      this.xMax = this.spec.xMax;
      this.xMin = (_ref1 = this.spec.xMin) != null ? _ref1 : -this.xMax;
      this.yMax = (_ref2 = this.spec.yMax) != null ? _ref2 : this.xMax;
      this.yMin = (_ref3 = this.spec.yMin) != null ? _ref3 : -this.yMax;
      this.kx = (this.xMax - this.xMin) / (this.pxMax - 1);
      this.ky = (this.yMax - this.yMin) / (this.pyMax - 1);
      this.plot();
    }

    ComplexFunctionImage.prototype.plot = function() {
      var hsla, px, py, v, x, y, z, zf, _i, _ref, _results;
      _results = [];
      for (px = _i = 0, _ref = this.pxMax - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; px = 0 <= _ref ? ++_i : --_i) {
        x = this.kx * px + this.xMin;
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (py = _j = 0, _ref1 = this.pyMax - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; py = 0 <= _ref1 ? ++_j : --_j) {
            y = -(this.ky * py + this.yMin);
            z = complex(x, y);
            zf = this.f(z);
            v = zf.abs().x;
            hsla = {
              h: this.angle(zf),
              s: this.colorMap.saturation(v),
              l: this.colorMap.lightness(v),
              a: this.colorMap.opacity(v)
            };
            _results1.push(this.image.setSquareHsla(px, py, hsla));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    ComplexFunctionImage.prototype.angle = function(z) {
      var a, pi;
      pi = Math.PI;
      a = Math.atan2(z.y, z.x);
      if (a < 0) {
        a += 2 * pi;
      }
      return 360 / (2 * pi) * a;
    };

    return ComplexFunctionImage;

  })();

  Image = (function() {

    function Image(canvasId, pixelsPerSquare) {
      this.canvasId = canvasId;
      this.pixelsPerSquare = pixelsPerSquare != null ? pixelsPerSquare : 1;
      this.element = document.getElementById(this.canvasId);
      this.width = this.element.width;
      this.height = this.element.height;
      this.element.width = this.width;
      this.ctx = this.element.getContext("2d");
    }

    Image.prototype.setSquare = function(x, y, col) {
      var p;
      if (col == null) {
        col = "red";
      }
      p = this.pixelsPerSquare;
      this.ctx.fillStyle = col;
      return this.ctx.fillRect(p * x, p * y, p, p);
    };

    Image.prototype.setSquareHsla = function(x, y, hsla) {
      var col;
      col = ("hsla(" + hsla.h + ", ") + ("" + (100 * hsla.s) + "%, ") + ("" + (100 * hsla.l) + "%, ") + ("" + hsla.a + ")");
      return this.setSquare(x, y, col);
    };

    Image.prototype.setSquareFromMap = function(x, y, hue, map, r, m) {
      var light, opacity, sat;
      if (m == null) {
        m = 1;
      }
      sat = 1;
      light = map.lightness(r, m);
      opacity = map.opacity(r, m);
      return this.setSquareHsla(x, y, {
        h: hue,
        s: sat,
        l: light,
        a: opacity
      });
    };

    Image.prototype.xMax = function() {
      return this.width / this.pixelsPerSquare;
    };

    Image.prototype.yMax = function() {
      return this.height / this.pixelsPerSquare;
    };

    return Image;

  })();

  $blab.ComplexFunctionImage = ComplexFunctionImage;

}).call(this);
