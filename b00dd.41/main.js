// Generated by CoffeeScript 1.4.0
(function() {
  var ComplexFunction, Gallery, GalleryExample, MainComplexFunction,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MainComplexFunction = (function() {

    MainComplexFunction.prototype.selectGalleryExample = "selectGalleryExample";

    function MainComplexFunction() {
      var _this = this;
      this.doc = $(document);
      this.doc.trigger("reprocessHtml");
      this.canvasId = "canvas";
      this.doc.unbind(this.selectGalleryExample);
      this.first = true;
      this.doc.on(this.selectGalleryExample, function(e, data) {
        var _ref;
        if ((_ref = _this.func) != null) {
          _ref.text("Loading...");
        }
        return setTimeout((function() {
          return _this.setExample(data.functionSpec, data.id);
        }), 10);
      });
    }

    MainComplexFunction.prototype.setExample = function(functionSpec, id) {
      this.draw(functionSpec, id);
      if (this.first) {
        this.animate(functionSpec);
        return this.first = false;
      } else {
        return this.changed = true;
      }
    };

    MainComplexFunction.prototype.draw = function(functionSpec, id) {
      var spec;
      $("#canvas_link").attr({
        href: "/m/" + id
      });
      spec = $.extend({}, functionSpec);
      spec.canvasId = this.canvasId;
      spec.mathJaxContainer = $("#mathjax");
      spec.sliderContainer = $("#slider");
      spec.sliderText = $("#slider_text");
      this.func = new ComplexFunction(spec);
      return this.doc.trigger("htmlOutputUpdated");
    };

    MainComplexFunction.prototype.animate = function(spec) {
      var a, setSlider,
        _this = this;
      a = spec.a;
      setSlider = function(v) {
        if ((_this.func.sliderTouched != null) || (_this.changed != null)) {
          return;
        }
        _this.func.setSliderVal(v);
        if (v < a.max) {
          return setTimeout((function() {
            return setSlider(v + a.step);
          }), 1000);
        }
      };
      return setSlider(a.min);
    };

    return MainComplexFunction;

  })();

  Gallery = (function() {

    Gallery.prototype.examplesId = "b00dh";

    Gallery.prototype.excludeRevisions = [1];

    function Gallery() {
      this.div = $("#examples");
      this.examples = [];
      this.getRevisions();
    }

    Gallery.prototype.getRevisions = function() {
      var spec,
        _this = this;
      spec = {
        id: this.examplesId,
        action: "getLabRevisions"
      };
      return $blab.server.request(spec, function(resp) {
        var r, _i, _len, _ref, _results;
        if (!resp.ok) {
          return;
        }
        _this.div.empty();
        _this.examplesToLoad = 0;
        _ref = resp.revisions;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(_this.getRevision(r.rev));
        }
        return _results;
      });
    };

    Gallery.prototype.getRevision = function(rev) {
      var id, _ref,
        _this = this;
      if (_ref = parseInt(rev), __indexOf.call(this.excludeRevisions, _ref) >= 0) {
        return;
      }
      id = "" + this.examplesId + "." + rev;
      this.examplesToLoad++;
      return this.examples.push(new GalleryExample(this.div, id, function() {
        return _this.exampleLoaded();
      }));
    };

    Gallery.prototype.exampleLoaded = function() {
      this.examplesToLoad--;
      if (this.examplesToLoad === 0) {
        return this.examples[0].select();
      }
    };

    return Gallery;

  })();

  GalleryExample = (function() {

    function GalleryExample(container, id, loadedCallback) {
      var _this = this;
      this.container = container;
      this.id = id;
      this.loadedCallback = loadedCallback;
      this.html();
      this.load();
      $(document).on("clickGalleryExample", function(e, data) {
        return _this.border(data.id === _this.id);
      });
    }

    GalleryExample.prototype.html = function() {
      var _this = this;
      this.div = $("<div>", {
        "class": "example"
      });
      this.container.append(this.div);
      this.mathJaxContainer = $("<div>", {
        "class": "mathjax_container"
      });
      this.canvasId = "canvas_" + this.id;
      this.link = $("<a>", {
        click: function() {
          return _this.select();
        }
      });
      this.sliderContainer = $("<div>", {
        "class": "slider_thumb"
      });
      this.sliderText = $("<span>", {
        "class": "slider_text"
      });
      this.div.append(this.mathJaxContainer).append(this.link).append(this.sliderContainer).append(this.sliderText);
      this.canvas = $("<canvas>", {
        id: this.canvasId,
        "class": "canvas",
        width: 120,
        height: 120,
        title: "Click to see larger image (at top)"
      });
      this.link.append(this.canvas);
      return this.border(false);
    };

    GalleryExample.prototype.load = function() {
      var t, url,
        _this = this;
      t = new Date().getTime();
      url = "/puzlet/php/source.php?pageId=" + this.id + "&file=main.coffee&t=" + t;
      return $.ajax({
        url: url,
        type: "get"
      }).done(function(data) {
        _this.runCoffee(data);
        return _this.loadedCallback();
      });
    };

    GalleryExample.prototype.runCoffee = function(coffee) {
      var _this = this;
      this.js = CoffeeEvaluator.compile(coffee);
      $blab.complexFunction = function(functionSpec) {
        var spec;
        _this.functionSpec = functionSpec;
        spec = $.extend({}, _this.functionSpec);
        spec.canvasId = _this.canvasId;
        spec.mathJaxContainer = _this.mathJaxContainer;
        spec.link = _this.link;
        spec.sliderContainer = _this.sliderContainer;
        spec.sliderText = _this.sliderText;
        return new ComplexFunction(spec);
      };
      return eval(this.js);
    };

    GalleryExample.prototype.select = function() {
      var data;
      this.border();
      data = {
        id: this.id,
        functionSpec: this.functionSpec
      };
      $.event.trigger("clickGalleryExample", data);
      return setTimeout((function() {
        return $.event.trigger("selectGalleryExample", data);
      }), 10);
    };

    GalleryExample.prototype.border = function(border) {
      if (border == null) {
        border = true;
      }
      return this.canvas.css({
        border: (border ? "2px solid blue" : "2px solid white")
      });
    };

    return GalleryExample;

  })();

  ComplexFunction = (function() {

    function ComplexFunction(spec) {
      var a, mathJax, _ref, _ref1,
        _this = this;
      this.spec = spec;
      this.setSliderText = __bind(this.setSliderText, this);

      mathJax = (_ref = this.spec.mathJax) != null ? _ref : "?=";
      this.spec.mathJaxContainer.html("$f(z) = " + mathJax + "$");
      if (this.spec.a != null) {
        a = this.spec.a;
        this.spec.sliderContainer.slider({
          min: a.min,
          max: a.max,
          step: a.step,
          value: a.init,
          slide: function(e, ui) {
            _this.sliderTouched = true;
            return _this.setSliderText(ui.value);
          },
          change: function(e, ui) {
            return _this.draw(ui.value);
          }
        });
      }
      this.draw((_ref1 = this.spec.a) != null ? _ref1.init : void 0);
    }

    ComplexFunction.prototype.draw = function(a) {
      var canvasId, f, xMax,
        _this = this;
      if (a != null) {
        this.setSliderText(a);
        f = function(z) {
          return _this.spec.f(z, a);
        };
      } else {
        f = this.spec.f;
      }
      xMax = this.spec.xMax;
      canvasId = this.spec.canvasId;
      return new $blab.ComplexFunctionImage({
        f: f,
        xMax: xMax,
        canvasId: canvasId
      }, $blab.colorMap);
    };

    ComplexFunction.prototype.text = function(txt) {
      var canvas, context, h, w;
      canvas = document.getElementById(this.spec.canvasId);
      context = canvas.getContext("2d");
      context.fillStyle = "white";
      context.font = "bold 16px Arial";
      context.textAlign = "center";
      w = canvas.width;
      h = canvas.height;
      return context.fillText(txt, w / 2, h / 2);
    };

    ComplexFunction.prototype.setSliderVal = function(a) {
      return this.spec.sliderContainer.slider("value", a);
    };

    ComplexFunction.prototype.setSliderText = function(val) {
      return this.spec.sliderText.html("a=" + val);
    };

    return ComplexFunction;

  })();

  new MainComplexFunction;

  new Gallery;

}).call(this);
